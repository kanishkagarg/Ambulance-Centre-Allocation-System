dataset = read.csv('Salary_Data.csv')
install.packages('caTools')
library(caTools)
set.seed(123)
split=sample.split(dataset$Salary, SplitRatio = 0.8)
training_set=subset(dataset,split==TRUE)
test_set=subset(dataset,split==FALSE)
regressor = lm(formula = Salary ~ YearsExperience, data = training_set)
y_pred = predict(regressor, newdata = test_set)
install.packages('ggplot2')
library(ggplot2)
ggplot() +
geom_point(aes(x=training_set$YearsExperience, y= training_set$Salary), colour='red') +
geom_line(aes(x=training_set$YearsExperience, y=predict(regressor,newdata = training_set,colour='blue')))+
ggtitle('Salary vs Experience (Training Set)') +
xlab('Years of Experience')+
ylab('Salary')
library(ggplot2)
ggplot() +
geom_point(aes(x=training_set$YearsExperience, y= training_set$Salary), colour='red') +
geom_line(aes(x=training_set$YearsExperience, y=predict(regressor,newdata = training_set,colour='blue')))+
ggtitle('Salary vs Experience (Training Set)') +
xlab('Years of Experience')+
ylab('Salary')
dataset = read.csv('Salary_Data.csv')
install.packages('caTools')
library(caTools)
set.seed(123)
split=sample.split(dataset$Salary, SplitRatio = 0.8)
training_set=subset(dataset,split==TRUE)
test_set=subset(dataset,split==FALSE)
regressor = lm(formula = Salary ~ YearsExperience, data = training_set)
y_pred = predict(regressor, newdata = test_set)
install.packages('ggplot2')
library(ggplot2)
ggplot() +
geom_point(aes(x=training_set$YearsExperience, y= training_set$Salary), colour='red') +
geom_line(aes(x=training_set$YearsExperience, y=predict(regressor,newdata = training_set,colour='blue')))+
ggtitle('Salary vs Experience (Training Set)') +
xlab('Years of Experience')+
ylab('Salary')
setwd("~/Desktop/PROJECTS/Minor/Ambulance-Centre-Allocation-System/Dataset")
setwd("~/Desktop/PROJECTS/Minor/Ambulance-Centre-Allocation-System/Dataset")
dataset = read.csv('locations_data.csv')
install.packages("plyr", dependencies= TRUE)
if(sessionInfo()['basePkgs']=="dplyr" | sessionInfo()['otherPkgs']=="dplyr"){
detach(package:dplyr, unload=TRUE)
}
library(plyr)
dataset = read.csv('locations_data_filtered_csv.csv')
install.packages("plyr", dependencies= TRUE)
if(sessionInfo()['basePkgs']=="dplyr" | sessionInfo()['otherPkgs']=="dplyr"){
detach(package:dplyr, unload=TRUE)
}
library(plyr)
install.packages("plyr", dependencies = TRUE)
df_itemList <- ddply(dataset,c("Crash_Ref_Number"),
function(dataset)paste(dataset$Crash_Atmospheric_Condition,dataset$Crash_Lighting_Condition,dataset$Crash_Road_Surface_Condition,dataset$Crash_Speed_Limit
collapse = ","))
df_itemList <- ddply(dataset,c("Crash_Ref_Number"),
function(dataset)paste(dataset$Crash_Atmospheric_Condition,dataset$Crash_Lighting_Condition,dataset$Crash_Road_Surface_Condition,dataset$Crash_Speed_Limit,
collapse = ","))
dataset = read.csv('locations_data_filtered_csv.csv')
install.packages("plyr", dependencies= TRUE)
if(sessionInfo()['basePkgs']=="dplyr" | sessionInfo()['otherPkgs']=="dplyr"){
detach(package:dplyr, unload=TRUE)
}
library(plyr)
df_itemList <- ddply(dataset,c("Crash_Ref_Number"),
function(dataset)paste(dataset$Crash_Atmospheric_Condition,dataset$Crash_Lighting_Condition,dataset$Crash_Road_Surface_Condition,dataset$Crash_Speed_Limit,
collapse = ","))
install.packages("plyr", dependencies = TRUE)
dataset$Crash_Ref_Number<-NULL
View(df_itemList)
View(df_itemList)
View(df_itemList)
View(df_itemList)
df_itemList <- ddply(dataset,c("Crash_Ref_Number"),
function(dataset)paste(dataset$Crash_Atmospheric_Condition,
collapse = ","))
dataset$Crash_Ref_Number<-NULL
dataset = read.csv('locations_data_filtered_csv.csv')
library(plyr)
df_itemList <- ddply(dataset,c("Crash_Ref_Number"),
function(dataset)paste(dataset$Crash_Atmospheric_Condition,
collapse = ","))
View(df_itemList)
View(df_itemList)
df_itemList <- ddply(dataset,c("Crash_Ref_Number"),
function(dataset)paste(dataset$Crash_Atmospheric_Condition,
collapse = ",",dataset$Crash_Lighting_Condition,collapse="," ))
dataset = read.csv('ARL_test.csv')
install.packages("arules", dependencies=TRUE)
library(arules)
txn = read.transactions(file="ARL_test.csv", rm.duplicates= TRUE, format="basket",sep=",",cols=1);
basket_rules <- apriori(txn,parameter = list(sup = 0.01, conf = 0.5,target="rules"));
if(sessionInfo()['basePkgs']=="tm" | sessionInfo()['otherPkgs']=="tm"){
detach(package:tm, unload=TRUE)
}
inspect(basket_rules)
#Alternative to inspect() is to convert rules to a dataframe and then use View()
df_basket <- as(basket_rules,"data.frame")
View(df_basket)
library(arulesViz)
plot(basket_rules)
plot(basket_rules, method = "grouped", control = list(k = 5))
plot(basket_rules, method="graph", control=list(type="items"))
plot(basket_rules, method="paracoord",  control=list(alpha=.5, reorder=TRUE))
plot(basket_rules,measure=c("support","lift"),shading="confidence",interactive=T)
itemFrequencyPlot(txn, topN = 5)
